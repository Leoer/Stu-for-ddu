1.什么是jQuery插件？
  jQuery插件是对jQuery框架利用原型的一个扩展。
  插件通常是一个完备功能的封装，它是JQ功能的一个补充或扩展。

  注意：开发JQ插件，该插件是依赖于JQ，所以必须先引入JQ，再引入插件。

2.jQuery的插件主要分3种类型：
  1）封装对象方法的插件（原型扩展）（主要的开发方式）
    这种是大多数采用的方法。操作原型，对jQuery框架侵入性较小。
  2）封装全局函数的插件（静态扩展）
    装方法或插件直接挂到类上。
  3）选择器插件 
    对JQ选择DOM的补充或扩展。
  
3.命名规范
  1）jquery.插件名.js（开发模式）
  2）jquery.插件名.min.js（产品模式，去bug调试，删除了回车、注释和多余的空格）

4.插件中$的冲突
  1）JQ让渡方法，让JQ让出对$的占用
    jQuery.noConflict()   --  解绑jQuery对$的引用，其后可以用jQuery代替$
  2）深度让渡
    jQuery.noConflict(true)  -- $和jQuery都不能用

5.在插件中使用闭包
  目的：为了避免变量的全局污染。

  IIFE是实现闭包的一种方式。

  实现方式：
    ;(function(){
      function 插件名(){
        // 实现插件功能的代码
      }
      
      jQuery.prototype.插件名 = 插件名
    })();

    或：
    ;(function($){
      function 插件名(){
        // 实现插件功能的代码
      }

      $.fn.插件名 = 插件名
    })(jQuery);

6. jQuery插件机制
  第一种，对jQuery函数prototype属性的别名（jQuery.fn）进行扩展。
    1）在原型上绑定单个方法
      ;(function($){
        $.fn.插件名 = function(参数){
          // 实现插件功能的代码
        }
      })(jQuery);

    2）批量绑定方法
      ;(function($){      
        $.fn.extend({
          // 扩展方法1
          方法1:function(参数){
             // 实现插件功能的代码
          },
          // 扩展方法2
          方法2:function(参数){
             // 实现插件功能的代码
          },
          // 扩展方法N .....
        })
      })(jQuery);

  第二种，采用jQuery.extend()方法进行（静态）扩展。
    语法格式：
      ;(function($){
        $.extend({
          方法名: function(参数) {
             // 实现插件功能的代码
          }
        });
      })(jQuery);

7.this
  在插件开发中，应先this缓存起来。这个this指向的是对象本身。
  this可以写成：this或$(this)

8.插件尽可能返回对象本身。

  插件的固定格式：
    ;(function($){
      var that;
      $.fn.插件名 = function(){
        that = this;
        // 实现插件功能的代码
      }

      return that;
    })(jQuery);

    或：
      ;(function($){
        var that;
        $.fn.extend = {
          插件名1: function(){
            that = this;
            // 实现插件功能的代码
          },
          插件名2: function(){
            that = this;
            // 实现插件功能的代码
          },
          插件名3: function(){
            that = this;
            // 实现插件功能的代码
          },
          ...
        }
        return that;
      })(jQuery);

9.配置参数
  如果传的参数是两个以上，最好将参数设置成对象。

10.设置默认值
  1）默认值设置
    var 默认值对象 = {值内容}
    
  2）将默认值对象和用户传过来的对象合并成一个新的对象。
    var settings = $.extend({},默认值,传过来的对象) // 对象合并

    注意：用户传值的对象要写在最后！

11.命名空间
  把所有方法以私有方法定在命名空间下，然后再结合闭包把方法查询表对外暴露出去。